# AULA 1
# ______________________________________________________________________________

# Abordagem da Aula ----

# Scripts/códigos no R
# Objetos no R
# Diretorios de trabalho

# COMENTÁRIOS___________________________________________________________________

#   Para inserir comentários utiliza-se o símbolo #. 

#   O que estiver à direita do símbolo # não será executado/processado pelo R

 
# CRIANDO VETORES_______________________________________________________________
# Todos os vetores em R têm um modo, classe e um tamanho. 
# O modo, classe, determina o tipo de valores guardados no vetor. 
# Em R os vetores podem ser classificados como: 
#   - character (conjunto de caracteres) 
#   - logical (valores lógicos: TRUE ou FALSE, T ou F) 
#   - numeric (números inteiros ou reais) e 
#   - complex (números complexos).

# criando um objeto do tipo vetor denominado height, contendo 20 "observações" 
height <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

height # exibindo em tela o objeto heigth

class(height)    # retorna a classe do objeto heigth
length(height)   # retorna o "tamanho" do objeto heigth
str(height)      # retorna a estrutura do objeto heigth


# OBSERVACAO:  
# Todos os elementos de um vetor são do mesmo tipo. Ao se tentar criar um vetor 
# com elementos de tipos diferentes o R vai força-los a ser do mesmo tipo 
# alterando-os (por coerção).

# criando um objeto do tipo vetor denominado v1, pela combinação de dois vetores
v1 <- c(c(1,2), c("A", "B", "D", "E"))

v1 # exibindo em tela o objeto v1

class(v1)    # retorna a classe do objeto v1
length(v1)   # retorna o "tamanho" do objeto v1
str(v1)      # retorna a estrutura do objeto v1


# CRIANDO MATRIZES______________________________________________________________
#   estruturas compostas por um conjunto de vetores, cujos elementos são de 
#   mesma classe. Matrizes arranjam a informação em duas dimensões
#   (linhas e colunas)

# Criando um objeto denominado M1 do tipo MATRIZ com as informações dos vetores 
#   "par", "impar":

par <- c(0, 2, 4, 6, 8)
impar <- c(1, 3, 5, 7, 9)

M1 <- matrix(c(0, 2, 4, 6, 8, 1, 3, 5, 7, 9), 
             nrow = 2, 
             ncol = 4)

M1 # exibindo em tela o objeto M1

class(M1)    # retorna a classe do objeto M1
length(M1)   # retorna o "tamanho" do objeto M1
str(M1)      # retorna a estrutura do objeto M1

# 2.2.2 Exemplo 7 ----  
# Alternativamente, combinando os vetores "height" e "age"
M1.1 <- matrix(c(par, impar),
               nrow = 2, 
               ncol = 5)  
M1.1 # exibindo em tela o objeto M1

class(M1.1)    # retorna a classe do objeto M1.1
length(M1.1)   # retorna o "tamanho" do objeto M1.1
str(M1.1)      # retorna a estrutura do objeto M1.1


# CRIANDO DATA FRAMES __________________________________________________________

#   Dataframes e tibbles são estruturas compostas por um conjunto de vetores.
#   Podendo os vetores ser de classes diferentes.

sex <- c("male", "female", "female", "female", "female")
# Inserindo os dados  
DF <- data.frame(par = c(0, 2, 4, 6, 8),
                 sex = c("male", "female", "female", "female", "female"),
                 age = c(1, 3, 5, 7, 9))

DF # exibindo em tela o objeto DF

class(DF)    # retorna a classe do objeto DF
length(DF)   # retorna o "tamanho" do objeto DF
str(DF)      # retorna a estrutura do objeto DF


# Criando DF a partir dos vetores já existentes par, sex e impar

DF.1 <- data.frame(par, impar, sex)

DF.1 # exibindo em tela o objeto DF.1

class(DF.1)    # retorna a classe do objeto DF.1
length(DF.1)   # retorna o "tamanho" do objeto DF.1
str(DF.1)      # retorna a estrutura do objeto DF.1



#   CRIANDO LISTA ______________________________________________________________
#   tipo especial de vetor que aceita elementos de classes diferentes.
#  coleçlão ordenada de objetos
#  Os objetos não necessitam ser do mesmo tipo, ou tamanho  

#  criando um objeto denomimado L1 da classe Lista a partir dos objetos já 
#   existentes par, impar, sex e DF 

L1 <- list(par, impar, sex, DF)

L1 # exibindo em tela o objeto DF.1

class(L1)    # retorna a classe do objeto L1
length(L1)   # retorna o "tamanho" do objeto L1
str(L1)      # retorna a estrutura do objeto L1


#  NAVEGANDO NO DIRETÓRIO DO TRABALHO___________________________________________
#  O `R` sempre trabalha em algum diretório para Buscar arquivos para 
#  carregar/importar;
#  Salvar arquivos;

# Retornando o diretorio de trabalho corrente
getwd()  

# definindo/alterando diretorio de trabalho
# EXEMPLO: 
local <- G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo
setwd("G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo")


# INTERAGINDO COM O SISTEMA OPERACIONAL ________________________________________
#   interagir com os arquivos do computador, seja criando novas pastas, 
#   descompactando e compactando arquivos, listando e removendo arquivos 
#   do disco rígido do computador ou qualquer outro tipo de operação.

# listando Arquivos e Pastas em um diretório
list.files("local") 

# listando diretórios
list.dirs()
list.dirs("local")

# Salvando um arquivo extensao .csv em um diretório
write.csv2(age,
           file = "D:/DIRETOARIO/age.csv")

list.files("local")  

# exluindo/removendo/apagando um arquivo extensao em um diretório  
file.remove("D:/DIRETOARIO/age.csv")
list.files("local")




# AULA 2 _______________________________________________________________________
# |> Principios Básicos ----

# Cálculos matemáticos básicos: 

1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)

# Armazenando resultados em um objeto por meio do Operador de Atribuição "<-" 

x <- 3 * 4
y <- (3 + 4) * 5

# combinar vários elementos em um vetor com c():

# Cria um vetor de números primos
primos <- c(2, 3, 5, 7, 11, 13)


# Aritmética básica em vetores é aplicada a cada elemento do vetor:

primos * 2 # multiplica primos por 2
primos - 1 # subtrai uma unidade

 _______________________________________________________________________________
# |> Pacotes / packages / libraries no R _______________________________________

# Instalando Pacotes via CRAN
install.packages('tidyverse') # instalando pacote 'tidyverse'
install.packages('readr')     # instalando pacote 'readr'


# Carregando pacote 'dplyr'
library(dplyr) 



# Pacotes (packages) comumente utilizados:

#  -> readr: Read Rectangular Text Data
#     em geral, para importar arquivos de textos contendo conjunto de dados 
#     separados por algum ‘delimitador’ ou por ‘posição fixa’  

#  -> readxl: Read Excel Files
#     para importar arquivos Excel (.xls, .xlsx)

#  -> haven: Import and Export ‘SPSS’, ‘Stata’ and ‘SAS’ Files
#     para importa arquivos nativos dos ambientes ‘SPSS’ (.sav, .zsav, .por), 
#    ‘Stata’ (.dta) e ‘SAS’ (.sas7bdat ).

#  -> googlesheets4
#     fornece uma interface R para o Google Sheets via the Sheets API v4.
#     importe planilhas de uma URL, um ID de planilha ou mesmo um drible 
#     do googledrive.

#  -> PNADcIBGE
#     baixa, carrega e analisa microdados da PNADC   

#  -> dentre outros.


#  __________________________________________________________________________  
# | The readxl library: Import functions                                     |
# |                                                                          |  
# |  Funções para ler/importar arquivos extensão xls e xlsx (Microsoft       |
# |  Excel):                                                                 |
# |                                                                          |  
# |  -> read_excel(): formato auto-detectado (xls, xlsx);                    |
# |  -> read_xls()  : formato xls;                                           |
# |  -> read_xlsx() : formato xlsx.                                          |
# |__________________________________________________________________________|

# Instalando pacote 'readxl'                                
install.packages("readxl")

# Carregando pacote
library(readxl)

# Funcao e argumentos para leitura de dados  
#  read_*(path,
#         sheet = NULL,
#         range = NULL,
#         col_names = TRUE,
#         col_types = NULL,
#         ...)

# Exemplo: 
# Leitura do Arquivo ‘Fazendas.xlsx’  
fazendas <- readxl::read_xlsx(path = "c:/DIRETORIO/Fazendas.xlsx",
                              sheet = "Fazendas")

names(fazendas) # print dos nomes das variaveis no objeto fazendas

str(fazendas) # print estrutura do objeto fazendas

# Tabela 1286: População e Distribuição da população pelas Grandes Regiões e
#              Unidades da Federação nos Censos Demográficos - 1872 a 2010  
tab.1286 <- readxl::read_xlsx(path = "c:/DIRETORIO/Tabela1286_Sidra-IBGE.xlsx",
                              sheet = "Tabela",
                              range = "A5:O37",
                              col_names = c("Nível",
                                            "COD",
                                            "UNIDADE",
                                            "A1872",
                                            "A1890",
                                            "A1900",
                                            "A1920",
                                            "A1940",
                                            "A1950",
                                            "A1960",
                                            "A1970",
                                            "A1980",
                                            "A1991",
                                            "A2000",
                                            "A2010"),
                              col_types = NULL,
                              na = "")

--------------------------------------------------------------------------------

# AULA 3 _______________________________________________________________________
  
# >> haven package  

#  __________________________________________________________________________
# | The haven library: Import functions                                      |
# |                                                                          |  
# |  A biblioteca Haven permite leitura de formatos de dados nativos dos     | 
# |  ambientes estatístico-computacionais: SAS, SPSS e Stata                 |
# |                                                                          |  
# |  Ambiente SAS:                                                           |
# |  -> read_sas(): lê arquivos .sas7bdat e .sas7bcat;                       |
# |  -> read_xpt(): lê arquivos SAS (versão 5 e versão 8);                   |
# |                                                                          |
# |  Ambiente SPSS:                                                          |
# |  -> read_sav(): lê arquivos .sav e .zsav;                                |
# |  -> read_por(): lê arquivos .por;                                        |
# |                                                                          |  
# |  Ambiente SAS:                                                           |
# |  -> read_dta(): lê arquivos .dta.                                        |
# |__________________________________________________________________________|

# Instalando pacote 'haven'
install.packages("haven")

# Carregando libraries  
library(haven)

# Funcao e argumentos para leitura de dados  
# read_*(file, ...) # vide help

# Exemplo 
# Usando conjunto de dados iris no diretorio examples do pacote haven

# definindo caminho do diretório 'examples' do pacote 'haven'
dir.examples <- system.file("examples", package = 'haven')

# verificando arquivos do diretório 'examples'
list.files(dir.examples)

# Importando conjunto de dados (SAS) do arquivo iris.sas7bdat
dados.iris.sas <- haven::read_sas(paste0(dir.examples,"/iris.sas7bdat"))

# print dos dados (head) do objeto dados.iris.sas
head(dados.iris.sas)

# Importando conjunto de dados (SPSS) do arquivo iris.sav
dados.iris.spss <- haven::read_sav(paste0(dir.examples,"/iris.sav"))

# print dos dados (head) do objeto dados.iris.spss
head(dados.iris.spss)

# Importando conjunto de dados (Stata) do arquivo iris.dta
dados.iris.stata <- haven::read_dta(paste0(dir.examples,"/iris.dta"))

# print dos dados (head) do objeto dados.iris.stata
head(dados.iris.stata)


# ______________________________________________________________________________
# >> googlesheets4 package ----  
#    importando planilhas do googledrive formato googlesheet  

# Instalando pacote googlesheets4 
install.packages("googlesheets4")

# Carregando pacote googlesheets4
library(googlesheets4)

# Carregando arquivo Fazendas do google drive 
fazendas2 <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1FKybbSiDveaJL-RlTl8hxbiNddfOzHCZVm3FZjH6yeo/edit?gid=2079528163#gid=2079528163",
                                       sheet = "Fazendas")

names(fazendas) # print dos nomes das variaveis no objeto fazendas

str(fazendas) # print estrutura do objeto fazendas



# Tabela 1286: População e Distribuição da população pelas Grandes Regiões e 
#              Unidades da Federação nos Censos Demográficos - 1872 a 2010  
# arquivo do googlesheet  

tab.1286 <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1AarZwzqCRIWTdSF9NTr9UESq-KrwqHItgi1Hrz7Whi8/edit?gid=42470094#gid=42470094",
                                      sheet = "Tabela",
                                      range = "A5:O37",
                                      col_names = c("Nível",
                                                    "COD",
                                                    "UNIDADE",
                                                    "A1872",
                                                    "A1890",
                                                    "A1900",
                                                    "A1920",
                                                    "A1940",
                                                    "A1950",
                                                    "A1960",
                                                    "A1970",
                                                    "A1980",
                                                    "A1991",
                                                    "A2000",
                                                    "A2010"),
                                      col_types = NULL,
                                      na = "")  

# ______________________________________________________________________________
# >> readr package ----  

#  __________________________________________________________________________  
# | The readr library: Import functions                                      |
# |   Read a delimited file into a tibble:                                   |
# |                                                                          |  
# |     Arquivos com delimitadores (delimited file): Arquivo em que as       |
# |     informações (variáveis) são ‘separadas’ por algum caractere          |
# |     delimitador tais como vírgula, ponto-e-vírgula (semi-vírgula),       |
# |     espaço, dentre outros.                                               |  
# |                                                                          |
# |  -> read_delim(): arquivos delimitados por caractere específico;         |
# |  -> read_csv()  : arquivos delimitados por vígulas;                      |
# |  -> read_csv2() : arquivos delimitados por ponto-e-vírgulas              |
# |                   (semi-vírgulas);                                       |
# |  -> read_tsv()  : arquivos separados por ‘tabulação’;                    |
# |  -> read_table(): arquivos separados por ‘espaço em branco’.             |
# |                                                                          |  
# |                                                                          |
# |  Read a fixed width file into a tibble:                                  |
# |                                                                          |  
# |    Arquivos posição fixa (fixed width file): Arquivos em que as          |
# |    informações (variáveis) são definidas pela posição dos caracteres,    |
# |    ou comprimento de um conjunto de caracteres, nos arquivos.            |
# |                                                                          |
# |  -> read_fwf()  :   arquivos definidos por posição fixa.                 |
# |__________________________________________________________________________|  

# Instalando pacote "readr"  
install.packages("readr")

# Carregando libraries ou packages
library(readr)

# Carregando base de dados DM_CURSO_2015.csv
DM_CURSO_2015 <- readr::read_delim("c:/DIRETORIO/DM_CURSO_2015.csv",
                                   delim = "|",
                                   col_names = TRUE)

names(DM_CURSO_2015) # print dos nomes das variaveis no objeto DM_CURSO_2015

str(DM_CURSO_2015) # print estrutura do objeto DM_CURSO_2015  


# Carregando base de dados PNAD 2015 - DOMICILIOS: "DOM.txt"
# arquivo do tipo "posicao fixa"
# pacote: 'readr'
# função: 'read_fwf'

# DEFININDO VETOR COM TAMANHO DOS CAMPOS DAS VARIAVEIS
# (EXCETO VARIAVEL UF)

tamanho.campos.2015 <- c(4, 8, 3, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1,
                         12, 12, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 2, 2, 4, 2, 12, 3, 12,
                         6, 9, 3, 5, 12, 4, 7, 7, 2, 12, 2, 1, 1,
                         7, 5, 8)   

# DEFININDO VETOR COM O NOME DAS VARIAVEIS (EXCETO VARIAVEL UF)
# nome.variaveis.2015

nome.variaveis.2015 <- c('V0101', 'V0102', 'V0103', 'V0104', 'V0105',
                         'V0106', 'V0201', 'V0202', 'V0203', 'V0204',
                         'V0205', 'V0206', 'V0207', 'V0208', 'V0209',
                         'V0210', 'V0211', 'V0212', 'V0213', 'V0214',
                         'V0215', 'V0216', 'V2016', 'V0217', 'V0218',
                         'V0219', 'V0220', 'V2020', 'V0221', 'V0222',
                         'V0223', 'V0224', 'V0225', 'V0226', 'V0227',
                         'V02270', 'V02271', 'V02272', 'V02273',
                         'V02274', 'V2027', 'V0228', 'V0229', 'V0230',
                         'V0231', 'V0232', 'V02321', 'V02322',
                         'V02323', 'V02324', 'V02325', 'V02326',
                         'V02327', 'V02424', 'V02425', 'V02426',
                         'V2032', 'V4105', 'V4107', 'V4600',
                         'V4601', 'V4602', 'V4604', 'V4605', 'V4606',
                         'V4607', 'V4608', 'V4609', 'V4610', 'V4611',
                         'V4614', 'UPA', 'V4617', 'V4618', 'V4620',
                         'V4621', 'V4622', 'V4624', 'V4628', 'V4632',
                         'V4633', 'V9992')  

# DEFININDO O TIPO DAS VARIAVEIS (EXCETO VARIAVEL UF)
# [c = character; n=number], tipo.variavel.2015

tipo.variaveis.2015 <- paste0("ccccccccccnncnncccccccncccccccccc",
                              "ccccccccccccccccccccccccccccccncn",
                              "ccnnncnncncccncc")

str(tipo.variaveis.2015) # print estrutura objeto nome.variaveis.2015

# Obtendo objeto denominado DOM_2015 pela aplicacao da função 'read_fwf’

DOM_2015 <- read_fwf("e:/DIRETORIO/DOM2015.txt",
                     fwf_widths((tamanho.campos.2015),
                                col_names = nome.variaveis.2015),
                     col_types = tipo.variaveis.2015)

names(DOM_2015) # print dos nomes das variaveis no objeto DOM_2015

str(DOM_2015) # print estrutura do objeto DOM_2015


#  AULA 5 ______________________________________________________________________

# ______________________________________________________________________________
# |> MANUSEIO: tratamento de dados com dplyr package ----
# __________________________________________________________________________

# >> funcionalidades e operações ----
# dplyr: Principais funcionalidades
#   -> tratamento em linhas, observações ou casos (subseting or extract 
#      observations);
#   -> tratamento em colunas ou variáveis (subseting or extract variables);
#   -> editar e criar novas colunas ou variáveis(Make new variables);
#   -> combinar conjunto de dados (combine dataframes or tibbles);
#   -> agrupar dados e (group data); 
#   -> resumir/sumarizar dados (summarise data).


#  Operações básicas com o pacote dplyr:
#   -> seleção de observações ou casos por seus valores: filter()
#   -> reordenação de linhas: arrange()
#   -> seleção de colunas ou variáveis: select()
#   -> criando novas colunas ou variáveis: mutate() 
#   -> resumo ou summarização de dados: summarize()


# instalando pacotes "nycflights13" e "dplyr"
install.packages("nycflights13", "dplyr")

# Alternativamente...
install.packages("nycflights13")
install.packages("dplyr")

# carregando pacotes "nycflights13" e "dplyr"
library(nycflights13)
library(dplyr)

#  __________________________________________________________________________
# | dplyr::filter                                                            |
# |                                                                          |
# | A função filter() permite criar um subconjunto de observações associadas |
# | um objeto dataframe. A seleção é resultante de retenção de casos que     |
# | satisfaçam condições com base em valores de observações                  |
# |__________________________________________________________________________|  

# principais argumentos  
#  -> nome do objeto
#  -> expressoes (operadores) de seleção/filtro  

# Exemplo 01:
#   Selecionar todos os voos de 1º de janeiro

ex.01 <- filter(voos,
                month == 1, day == 1)
dim(ex.01) # retorna a dimensão do objeto "ex.01"

# Exemplo 02: 
#   selecionar todos os voos que partiram em novembro OU dezembro

ex.02 <- filter(voos, 
                month == 11 | month == 12)


# alternativamente
ex.02.1 <- filter(voos, 
                  month %in% c(11, 12))

# ______________________________________________________________________________
# >> Selecões ("select") de variaveis (colunas) utilizando dplyr::select() ----

#  __________________________________________________________________________
# | dplyr::select                                                            |
# |                                                                          |
# | A função select() permite criar um subconjunto de um objeto dataframe    |
# | selecionando colunas/variáveis de interesse.                             |
# |__________________________________________________________________________|  

# principais argumentos  
#  -> nome do objeto dataframe
#  -> variaveis de interesse  


#   selecionar no objeto voos as variáveis "year", "month" e "day"

# criando objeto 'ex.04' selecionando as variáveis 'year', 'month' e 'day’
ex.04 <- select(voos, 
                year, month, day)

head(exemplo.7, n = 10) # exibindo 10 primeiras linhas objeto 'ex.04'

# aternativamente:
ex.04.1 <- select(voos, 
                  year:day)
head(ex.04.1, n = 10) # exibindo 10 primeiras linhas objeto 'ex.04.1'


# Exemplo 05 (selecao por exclusao)
#   selecionar no objeto voos todas as variáveis exceto "year", "month" e "day"
ex.05 <- select(voos, 
                -c(year, month, day))


# ______________________________________________________________________________
# >> Adicionando/criando colunas/variáveis com mutate() ----

#  __________________________________________________________________________
# | dplyr::mutate                                                            |
# |                                                                          |
# | A função mutate() permite obter novas colunas/variáveis em função, por   | 
# | exemplo, de variáveis já existentes em um objeto dataframe, inserindo    |
# | as novas colunas/variáveis no “final” do dataframe                       |
# |__________________________________________________________________________|  

# AULA 7 _______________________________________________________________________

# Carregando arquivo aula 7
# funcionarios_df
getwd()  

load("G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo/Dados aula 7/funcionarios_df.RData")
View(funcionarios_df)

# livraria_df
load("G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo/Dados aula 7/livraria_df.RData")
View(livraria_df)

# vendas_ecnom_df
load("G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo/Dados aula 7/vendas_ecom_df.RData")
View(vendas_ecom_df)

# ______________________________________________________________________________
# Exemplo 1: Selecione e exiba apenas as colunas 'Titulo', 'Autor' e 'Preco' 
#            de todos os livros.

exemplo_1 <- livraria_df |>
  dplyr::select(Titulo, Autor, Preco)

print(exemplo_1)

# ______________________________________________________________________________
# Exemplo 2: Filtre o dataframe para mostrar apenas os livros que pertencem ao 
#            gênero 'Fantasia'.

exemplo_2 <- livraria_df |>
  dplyr::filter(Genero == "Fantasia")

print(exemplo_2)

# ______________________________________________________________________________
# Exemplo 3: Ordene o dataframe pelo preço dos livros em ordem decrescente.

exemplo_3 <- livraria_df  |>
  dplyr::arrange(desc(Preco))

print(exemplo_3)  

# ______________________________________________________________________________
# Exemplo 4: Crie uma nova coluna chamada 'Preco_Promocional', que mostra o 
#            preço original com 10% de desconto.

exemplo_4 <- livraria_df |>
  dplyr::mutate(Preco_Promocional = Preco * 0.90)

print(exemplo_4)

# ______________________________________________________________________________
# Exemplo 5: Conte quantos livros existem em cada gênero.

exemplo_5 <- livraria_df |>
  dplyr::group_by(Genero) |>
  dplyr::summarise(Quantidade_de_Livros = n())

print(exemplo_5)  

# ______________________________________________________________________________
# Exemplo 6: Filtre os livros que custam menos de R$ 50,00 e, em seguida, 
#            selecione apenas o título e o preço.

exemplo_6 <- livraria_df |>
  dplyr::filter(Preco < 50.00) |>
  dplyr::select(Titulo, Preco)

print(exemplo_6) 

# ______________________________________________________________________________
# Exemplo 7: Encontre todos os livros escritos por 'George Orwell' e ordene-os 
#            por ano de publicação.

exemplo_7 <- livraria_df |>
  dplyr::filter(Autor == "George Orwell") |>
  dplyr::arrange(Ano_Publicacao)

print(exemplo_7)  

# ______________________________________________________________________________
# Exemplo 8: Calcule o preço médio dos livros para cada autor.

exemplo_8 <- livraria_df |>
  dplyr::group_by(Autor) |>
  dplyr::summarise(Preco_Medio = mean(Preco))

print(exemplo_8)  

# ______________________________________________________________________________
# Exemplo 9: Filtre os livros que foram publicados depois do ano 2000 e que têm 
#            uma nota média superior a 4.7.

exemplo_9 <- livraria_df |>
  dplyr::filter(Ano_Publicacao > 2000 & Nota_Media > 4.7)

print(exemplo_9)  

# ______________________________________________________________________________
# Exemplo 10: Para cada gênero, encontre o livro mais caro e mostre o gênero, o
#            título do livro e o seu preço.

exemplo_10 <- livraria_df |>
  dplyr::group_by(Genero) |>
  dplyr::filter(Preco == max(Preco)) |>
  dplyr::select(Genero, Titulo, Preco)

print(exemplo_10)  


# dataframe chamado vendas_ecom_df. Ele simula dados de transações de um 
# e-commerce internacional, contendo informações sobre pedidos, produtos, 
# clientes e descontos. 

# As colunas são:
#   ID_Pedido: Identificador do pedido.
#   ID_Cliente: Identificador do cliente.
#   ID_Produto: Identificador do produto.
#   Categoria: Categoria do produto.
#   Quantidade: Quantidade de itens do produto no pedido.
#   Preco_Unitario: Preço por unidade do produto.
#   Data_Pedido: A data em que o pedido foi feito.
#   Pais: O país do cliente.
#   Desconto: A porcentagem de desconto aplicada (ex: 0.1 para 10%). 
#             "NA" indica que não houve desconto.  

# ______________________________________________________________________________
# Exemplo 11: Para cada categoria de produto, calcule o número de produtos 
#             distintos vendidos, a quantidade total de itens vendidos e o preço
#             médio por item (considerando o preço unitário).

exemplo_11 <- vendas_ecom_df |>
  dplyr::group_by(Categoria) |>
  dplyr::summarise(Produtos_Distintos = n_distinct(ID_Produto),
                   Total_Itens_Vendidos = sum(Quantidade),
                   Preco_Medio_Item = mean(Preco_Unitario))

print(exemplo_11) 

# ______________________________________________________________________________
# Exemplo 12: Encontre os clientes que fizeram compras em mais de um país 
#             diferente.

exemplo_12 <- vendas_ecom_df |>
  dplyr::group_by(ID_Cliente) |>
  dplyr::summarise(Paises_Distintos = n_distinct(Pais)) |>
  dplyr::filter(Paises_Distintos > 1)

print(exemplo_12)  

# ______________________________________________________________________________
# Exemplo 13: Crie uma coluna 'Tipo_Desconto' classificando como 'Alto' 
#             (desconto > 15%), 'Médio' (desconto > 5% e <= 15%), 'Baixo' 
#             (desconto <= 5%) ou 'Nenhum' (NA). Depois, conte quantos pedidos
#             existem em cada tipo de desconto.

exemplo_13 <- vendas_ecom_df |>
  dplyr::mutate(Tipo_Desconto = case_when(is.na(Desconto) ~ "Nenhum",
                                          Desconto > 0.15 ~ "Alto",
                                          Desconto > 0.05 ~ "Médio",
                                          TRUE ~ "Baixo")) |>
  count(Tipo_Desconto) 

print(exemplo_13)

# ______________________________________________________________________________  
# Exemplo 14: Identifique os clientes 'diversificados', definidos como aqueles 
#             que compraram produtos de pelo menos 3 categorias diferentes. 
#             Mostre o ID do cliente e o número de categorias distintas que ele 
#             comprou.

exemplo_14 <- vendas_ecom_df |>
  dplyr::group_by(ID_Cliente) |>
  dplyr::summarise(Categorias_Distintas = n_distinct(Categoria)) |>
  dplyr::filter(Categorias_Distintas >= 3) |>
  dplyr::arrange(desc(Categorias_Distintas))

print(exemplo_14)  

# ______________________________________________________________________________  
# Exemplo_15: Encontre o mês com o maior valor médio de desconto concedido. 
#             Considere apenas os pedidos que tiveram desconto.

exemplo_15 <- vendas_ecom_df |>
  dplyr::filter(!is.na(Desconto)) |> # Filtra apenas pedidos com desconto
  dplyr::mutate(Mes_Ano = format(Data_Pedido, "%Y-%m")) |>
  dplyr::group_by(Mes_Ano) |>
  dplyr::summarise(Desconto_Medio = mean(Desconto)) |>
  dplyr::arrange(desc(Desconto_Medio)) |>
  dplyr::slice(1) # Seleciona a linha com o maior valor

print(exemplo_15)

# ______________________________________________________________________________  
# Exemplo_15: Encontre o mês com o maior valor médio de desconto concedido. 
#             Considere apenas os pedidos que tiveram desconto.

exemplo_15 <- vendas_ecom_df |>
  dplyr::filter(!is.na(Desconto)) |> # Filtra apenas pedidos com desconto
  dplyr::mutate(Mes_Ano = format(Data_Pedido, "%Y-%m")) |>
  dplyr::group_by(Mes_Ano) |>
  dplyr::summarise(Desconto_Medio = mean(Desconto)) |>
  dplyr::arrange(desc(Desconto_Medio)) |>
  dplyr::slice(1) # Seleciona a linha com o maior valor

print(exemplo_15)

# ______________________________________________________________________________  
# DATAFRAME funcionarios_df ----
load(file = "c:/DIRETORIO/funcionarios_df.RData")

# Este conjunto de dados simula o registro de funcionários de uma empresa de 
# médio porte, contendo informações sobre seu cargo, departamento, salário, 
# tempo de casa e desempenho. Com 150 registros, ele oferece uma base de dados
# rica para análises mais detalhadas.

# As colunas são:
#   ID_Funcionario: Identificador único do funcionário.
#   Nome: Nome do funcionário.
#   Departamento: Departamento em que o funcionário trabalha.
#   Cargo: Cargo do funcionário.
#   Salario_Mensal: Salário bruto mensal em reais.
#   Data_Contratacao: Data em que o funcionário foi contratado.
#   Nota_Avaliacao_Anual: Nota da última avaliação de desempenho (1 a 5).
#   Recebeu_Bonus: Valor lógico (TRUE/FALSE) indicando se recebeu bônus no 
#                  último ano.
#   Horas_Treinamento_Ano: Total de horas de treinamento completadas no último ano. 

# ______________________________________________________________________________
# Exemplo_16: Encontre os 5 funcionários com maior salário na empresa. 
#             Exiba o nome, o departamento, o cargo e o salário mensal.

library(dplyr)   # Carrega o pacote dplyr, usado para manipulação de dados

funcionarios_df %>%                      # Usa o dataframe como entrada
  arrange(desc(Salario_Mensal)) %>%      # Ordena os funcionários do maior para o menor salário
  select(Nome, Departamento, Cargo, Salario_Mensal) %>%  # Seleciona apenas as colunas que queremos exibir
  head(5)                                # Pega apenas as 5 primeiras linhas (os 5 maiores salários)

# ______________________________________________________________________________
# Exemplo_17: Crie uma coluna 'Faixa_Performance' baseada na 
#             'Nota_Avaliacao_Anual': 'Excelente' (>= 4.5), 'Bom' (>= 3.5), 
#             'Regular' (>= 2.5), 'Abaixo do Esperado' (< 2.5). Depois, conte 
#              quantos funcionários existem em cada faixa.

funcionarios_df %>%
  mutate(                              # Cria ou modifica colunas
    Faixa_Performance = case_when(     # Define valores de acordo com condições
      Nota_Avaliacao_Anual >= 4.5 ~ "Excelente",         # Se nota ≥ 4.5
      Nota_Avaliacao_Anual >= 3.5 ~ "Bom",               # Se nota ≥ 3.5
      Nota_Avaliacao_Anual >= 2.5 ~ "Regular",           # Se nota ≥ 2.5
      TRUE ~ "Abaixo do Esperado"                        # Caso contrário
    )
  ) %>%
  count(Faixa_Performance,             # Conta quantos funcionários existem em cada faixa
        name = "Total_Funcionarios") %>%
  arrange(desc(Total_Funcionarios))    # Ordena do maior grupo para o menor



# ______________________________________________________________________________ 
# Exemplo_18: Compare o salário médio dos funcionários que receberam bônus com 
#             os que não receberam, para cada cargo.

funcionarios_df %>%
  group_by(Cargo, Recebeu_Bonus) %>%          # Agrupa os dados por cargo e por bônus (TRUE/FALSE)
  summarise(
    Salario_Medio = mean(Salario_Mensal, na.rm = TRUE)  # Calcula média salarial de cada grupo
  ) %>%
  arrange(Cargo, desc(Recebeu_Bonus))         # Ordena pela coluna Cargo e dentro do cargo mostra TRUE antes de FALSE
View(group_by())


# ______________________________________________________________________________
# Exemplo 19: Calcule a proporção (em porcentagem) de funcionários que receberam
#             bônus em cada departamento e ordene do maior para o menor.

funcionarios_df %>%
  group_by(Departamento) %>%                # Agrupa os dados por departamento
  summarise(
    Percentual_Bonus = 100 * mean(Recebeu_Bonus, na.rm = TRUE)  
    # mean(TRUE/FALSE) em R = proporção de TRUE
    # Multiplicamos por 100 para converter em porcentagem
  ) %>%
  arrange(desc(Percentual_Bonus))     # Ordena do maior percentual para o menor



# ______________________________________________________________________________  
# Exemplo 20: Encontre os departamentos onde o salário médio dos 'Gerentes' é 
#             superior a R$ 12.000.

funcionarios_df %>%
  filter(Cargo == "Gerente") %>%                     # Mantém apenas funcionários com cargo "Gerente"
  group_by(Departamento) %>%                         # Agrupa por departamento
  summarise(
    Salario_Medio_Gerentes = mean(Salario_Mensal, na.rm = TRUE)  # Calcula média salarial
  ) %>%
  filter(Salario_Medio_Gerentes > 12000)             # Mantém apenas os departamentos com média > 12000




# AULLA 9_______________________________________________________________________



# Carregando dados




# 1. Definir a pasta
setwd("G:/Meu Drive/1. João Fernandes/1. Formação Acadêmica/1. Faculdade/1. UFMT - Bacharelado em Estatística/1. Semestres/3º Semestre/4. Pacotes Estatísticos/1. Aula/Resumo/Dados aula 9")

# 2. Carregar pacotes
library(dplyr)
library(tidyr)
library(readxl)
library(stringr)

# 3. Importar planilha
municipios.area <- read_xlsx("AR_BR_RG_UF_RGINT_MES_MIC_MUN_2022.xlsx")
View(municipios.area)

# 4. Carregar arquivo .RData
load("dados_aula_20220911.RData")

# 5. Conferir objetos carregados
ls()
View(populacao)



# 1) Obtenha um novo objeto pivotando o objeto "populacao",para um formato longo
#    em que as variáveis de anos sejam convertidas em uma única variável 
#    denominada ANO, e os valores de população sejam convertidos em uma variável
#    denominada POPULACAO.  


populacao_longo <- populacao %>%
  pivot_longer(
    cols = starts_with("A"),    # pega todas as colunas cujo nome começa com "A" (ex: A1872, A2022)
    names_to = "ANO",           # cria uma nova coluna chamada ANO
    names_prefix = "A",         # remove o "A" do começo (então A1872 vira 1872)
    values_to = "POPULACAO"     # cria uma coluna chamada POPULACAO com os valores
  ) %>%
  mutate(ANO = as.numeric(ANO)) # transforma o ano em número (estava como texto)

print(populacao_longo)         



# 2) Obtenha um novo objeto a partir do objeto "populacao", calculando  
#    o percentual de crescimento populacional CP_1872_2022 do Brasil e das Grandes 
#    Regiões entre os anos de 1872 e 2022, e calculando a taxa de crescimento 
#    geometrica anual TCG_1872_2022 do Brasil e das Grandes Regiões entre os 
#    anos de 1872 e 2022. O objeto resultante deverá conter apenas as variáveis
#    CHAVE, NIVEL, COD, UNIDADE, A1872, A2022, CP_1872_2022 e TCG_1872_2022.


crescimento_1872_2022 <- populacao |>
  dplyr::mutate(
    # Calcula o crescimento percentual entre 1872 e 2022
    CP_1872_2022 = ((A2022 - A1872) / A1872) * 100,
    # Calcula a taxa de crescimento geométrica anual (TCG) entre 1872 e 2022
    TCG_1872_2022 = ((A2022 / A1872)^(1 / (2022 - 1872)) - 1) * 100
  ) |>
  # Seleciona apenas as colunas relevantes para o resultado final
  dplyr::select(CHAVE, NIVEL, COD, UNIDADE, A1872, A2022, CP_1872_2022, TCG_1872_2022)

# Exibe o data frame resultante em uma aba do RStudio
View(crescimento_1872_2022)




# 3) Considerando que no objeto "municipios.area" o Codigo das Regiões 
#    Brasileiras corresponde ao primeiro caracter da variável COD_UF, 
#    em que 1 = Norte, 2 = Nordeste, 3 = Sudeste 4 = Sul e 5 = Centro-Oeste. 
#    Objenha um novo objeto a partir do objeto "municipios.area" contendo a Area 
#    territorial segundo Grande Região Brasileira.  


questao.3 <- municipios.area |> 
  dplyr::mutate(
    # Extrai o primeiro dígito do código da UF e converte em número inteiro
    COD = as.integer(stringr::str_sub(CD_UF, 1, 1)),
    
    # Converte o código numérico para o nome da Região
    UNIDADE = dplyr::recode(
      COD,
      '1' = "Norte",
      '2' = "Nordeste",
      '3' = "Sudeste",
      '4' = "Sul",
      '5' = "Centro-Oeste"
    )
  ) |>
  # Agrupa por região para calcular a soma da área
  dplyr::group_by(COD, UNIDADE) |> 
  # Soma a área dos municípios para obter a área total por Região
  dplyr::summarise(AR_REG_2022 = sum(AR_MUN_2022, na.rm = TRUE))

View(questao.3)

# 4) Obtenha um objeto contendo a Densidade Demográfica segundo as Grandes
#    Regiões Brasileiras em 2022. A Densidade Demográfica é obtida pelo
#    quociente do número de habitantes pela área territorial.  

questao.4 <- populacao |> 
  dplyr::select(COD, UNIDADE, A2022) |>  # Seleciona apenas colunas relevantes
  # Faz um join com a tabela de área territorial
  dplyr::left_join(questao.3, by = "UNIDADE") |> 
  # Cria coluna com a densidade demográfica
  dplyr::mutate(DD_2022 = A2022 / AR_REG_2022)

View(questao.4)



# 5) Identifique os 30 municipios com de maior Area territorial em 2022. 
#    Em quais Unidades da Federação estão localizados esses municípios? 

questao.5 <- municipios.area |> 
  dplyr::arrange(desc(AR_MUN_2022)) |>  # Ordena em ordem decrescente pela área do município
  dplyr::slice_head(n = 30) |>          # Pega apenas os 30 primeiros
  dplyr::select(NM_UF, NM_MUN, AR_MUN_2022)  # Mostra apenas as colunas relevantes

# Visualizar resultado
View(questao.5)


# 6) Quantos municípios possuem área territorial menor a 5.000 km2?
#    Quais são eles?

questao.6 <- municipios.area |> 
  dplyr::filter(AR_MUN_2022 < 5) |>    # Mantém apenas os municípios com área < 5 km²
  dplyr::select(NM_UF, NM_MUN, AR_MUN_2022)  # Exibe apenas colunas relevantes

# Visualizar resultado
View(questao.6)




# 7) Quantos municípios existem em casa Unidade da Federação?

questao.7 <- municipios.area |> 
  dplyr::group_by(NM_UF) |>             # Agrupa por estado
  dplyr::summarise(QTD_MUNICIPIOS = n()) # Conta o número de municípios por grupo

# Visualizar resultado
View(questao.7)

