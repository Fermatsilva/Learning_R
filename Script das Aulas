# ______________________________________________________________________________
# Universidade Federal de Mato Grosso
# Departamento de Estatistica

# 321 - ESTATÍSTICA BACHARELADO
# 108300598 - PACOTES ESTATISTICOS

# AULA 1
# ______________________________________________________________________________

# Abordagem da Aula ----

# Scripts/códigos no R
# Objetos no R
# Diretorios de trabalho

# ______________________________________________________________________________

# 1 - Códigos Computacionais no R/Rstudio ----

#   Uso de script (roteiro ou rotina) 
#   Comandos em sequencia
#   Mitiga erro humano na execução de procedimentos
#   Comandos e a sua sequencia executados sempre da mesma forma
#   Compartilhamento de códigos
#   Procedimentos podem ser replicados


# Comentarios no script/codigo

#   Para inserir comentários utiliza-se o símbolo #. 

#   O que estiver à direita do símbolo # não será executado/processado pelo R

#   Os comentários são uma maneira de comunicar qualquer informação importante
#     que não pode ser inferida diretamente do código. 

#   O uso correto de comentários é tão importante quanto o código em si. 
#     entendimento quando bem feitos, aumentam a reprodutibilidade, organização  
#     e do código. Em geral, você deve evitar o uso de comentários que são muito 
#     óbvios ou muito genéricos.


# ______________________________________________________________________________
# 2 - Linguagem orientada a objetos ----

# R é uma linguagem orientada a objetos.
#   “No R, tudo é um objeto, e cada tipo de objeto tem suas propriedades”. 
#    (Perlin, 2018)

# “[…] tudo o que nós vamos usar no R está guardado na memória do computador sob
#   forma de um objeto” (Torgo, 2006)

# Todos os objectos em R devem ter um nome associado

# Os nomes dos objetos em R são sensíveis às letras maiúsculas minúsculas 
#   (p. ex.: Cor e cor são nome de dois objetos diferentes)

# Não se pode usar espaços nos nomes dos objetos.

# Pode-se armazenar elementos de diferentes tipos e classes
#   números, 
#   textos, 
#   vetores, 
#   matrizes, 
#   expressões, 
#   chamadas a funções, etc.

# ______________________________________________________________________________
# 2 Exemplos de Objetos no R

# 2.1 Vetores ----
#   Estrutura de dados que permite armazenar um conjunto de valores do mesmo 
#   tipo (sequencia de valores alfanumericos). Em geral, representam uma 
#   variavel (ex.: peso, idade, altura, cor/raça, etc).

# Todos os vetores em R têm um modo, classe e um tamanho. 

# O modo, classe, determina o tipo de valores guardados no vetor. 

# Em R os vetores podem ser classificados como: 
#   - character (conjunto de caracteres) 
#   - logical (valores lógicos: TRUE ou FALSE, T ou F) 
#   - numeric (números inteiros ou reais) e 
#   - complex (números complexos).

# 2.1.1 Exemplo 1 ----
# criando um objeto do tipo vetor denominado height, contendo 20 "observações" 
  height <- c(74.42, 65.53, 63.62, 63.1, 63.4, 64.39, 61.65, 72.69, 72.03, 
              72.23, 69.51, 68.03, 67.55, 65.43, 65.66, 67.75, 68.35, 69.6,
              64.18, 73.07)

  height # exibindo em tela o objeto heigth
  
  class(height)    # retorna a classe do objeto heigth
  length(height)   # retorna o "tamanho" do objeto heigth
  str(height)      # retorna a estrutura do objeto heigth

# 2.1.2 Exemplo 2 ----
# criando um objeto do tipo vetor denominado sex, contendo 20 "observações" 
  sex <- c("male", "female", "female", "female", "female", "female", "female", 
           "male", "male", "male", "male", "male", "male", "female", "female", 
           "male", "female", "male", "female", "male")
  
  sex # exibindo em tela o objeto sex
  
  class(sex)    # retorna a classe do objeto sex
  length(sex)   # retorna o "tamanho" do objeto sex
  str(sex)      # retorna a estrutura do objeto sex
  
# 2.1.3 Exemplo 3 ----
# criando um objeto do tipo vetor denominado age, contendo 20 "observações" 
  age <- c(45, 58, 29, 91, 39, 26, 49, 46, 21, 26, 65, 34, 27, 51, 35, 58, 29, 
           44, 55, 35)
  
  age # exibindo em tela o objeto sex
  
  class(age)    # retorna a classe do objeto age
  length(age)   # retorna o "tamanho" do objeto age
  str(age)      # retorna a estrutura do objeto age
  
# 2.1.4 Exemplo 4 ----
# criando um objeto do tipo vetor denominado race, contendo 20 "observações" 
  race <- c("white", "white", "white", "other", "white", "white", "white", 
            "white", "hispanic", "white", "white", "white", "white", "white",
            "white", "white", "white", "white", "black", "black")
  
  race # exibindo em tela o objeto race
  
  class(race)    # retorna a classe do objeto race
  length(race)   # retorna o "tamanho" do objeto race
  str(race)      # retorna a estrutura do objeto race

# OBSERVACAO:  
# Todos os elementos de um vetor são do mesmo tipo. Ao se tentar criar um vetor 
#   com elementos de tipos diferentes o R vai força-los a ser do mesmo tipo 
#   alterando-os (por coerção).

# 2.1.5 Exemplo 5 ----  
# criando um objeto do tipo vetor denominado v1, pela combinação de dois vetores
  v1 <- c(c(1,2), c("A", "B", "D", "E"))
  
  v1 # exibindo em tela o objeto v1
  
  class(v1)    # retorna a classe do objeto v1
  length(v1)   # retorna o "tamanho" do objeto v1
  str(v1)      # retorna a estrutura do objeto v1
  

    
# 2.2 Matrizes ----
#   estruturas compostas por um conjunto de vetores, cujos elementos são de 
#   mesma classe.

#   matrizes arranjam a informação em duas dimensões (linhas e colunas)
  
# Criando um objeto denominado M1 do tipo MATRIZ com as informações dos vetores 
#   "height" e "age":

# 2.2.1 Exemplo 6 ----
# inserindo os dados    
  M1 <- matrix(c(74.42, 65.53, 63.62, 63.10, 63.40, 64.39, 61.65, 72.69, 72.03,
                 72.23, 69.51, 68.03, 67.55, 65.43, 65.66, 67.75, 68.35, 69.60,
                 64.18, 73.07, 45, 58, 29, 91, 39, 26, 49, 46, 21, 26, 65, 34, 
                 27, 51, 35, 58, 29, 44, 55, 35), 
               nrow = 20, 
               ncol = 2)
  
  M1 # exibindo em tela o objeto M1
  
  class(M1)    # retorna a classe do objeto M1
  length(M1)   # retorna o "tamanho" do objeto M1
  str(M1)      # retorna a estrutura do objeto M1

# 2.2.2 Exemplo 7 ----  
# Alternativamente, combinando os vetores "height" e "age"
  M1.1 <- matrix(c(height, age),
                 nrow = 20, 
                 ncol = 2)  
  
  class(M1.1)    # retorna a classe do objeto M1.1
  length(M1.1)   # retorna o "tamanho" do objeto M1.1
  str(M1.1)      # retorna a estrutura do objeto M1.1
  
# 2.2.3 Exemplo 8 ----  
# Alternativamente, combinando os vetores "height" e "age" por meio da função
# cbind()  
  M1.2 <- cbind(height, age)
  
  class(M1.2)    # retorna a classe do objeto M1.2
  length(M1.2)   # retorna o "tamanho" do objeto M1.2
  str(M1.2)      # retorna a estrutura do objeto M1.2
  
# 2.2.3 Exemplo 9 ----  
# criando uma matriz a partir dos vetores height e sex:
  M2 <- cbind(height, sex)
  
  M2 # exibindo em tela o objeto M2
  
  class(M2)    # retorna a classe do objeto M2
  length(M2)   # retorna o "tamanho" do objeto M2
  str(M2)      # retorna a estrutura do objeto M2
  


# 2.3 Dataframes e tibbles ----
#   estruturas compostas por um conjunto de vetores. Podendo os vetores ser de 
#   classes diferentes.

#   Em geral associam-se a datasets ou base de dados de pesquisas
  
# 2.3.1 Exemplo 10 ----  
# Criando um objeto denominado DF da classe dataframe com informações dos  
# vetores height, sex e age

# Inserindo os dados  
  DF <- data.frame(height = c(74.42, 65.53, 63.62, 63.10, 63.40, 64.39, 61.65, 
                              72.69, 72.03, 72.23, 69.51, 68.03, 67.55, 65.43,
                              65.66, 67.75, 68.35, 69.6,64.18, 73.07),
                   sex = c("male", "female", "female", "female", "female", 
                           "female", "female", "male", "male", "male", "male",
                           "male", "male", "female", "female", "male", "female",
                           "male", "female", "male"),
                   age = c(45, 58, 29, 91, 39, 26, 49, 46, 21, 26, 65, 34, 27,
                           51, 35, 58, 29, 44, 55, 35))
  
  DF # exibindo em tela o objeto DF
  
  class(DF)    # retorna a classe do objeto DF
  length(DF)   # retorna o "tamanho" do objeto DF
  str(DF)      # retorna a estrutura do objeto DF
  
  
# 2.2.3 Exemplo 11 ----  
# a partir dos vetores já existentes height, sex e ag
  
  DF.1 <- data.frame(height, sex, age)
  
  DF.1 # exibindo em tela o objeto DF.1
  
  class(DF.1)    # retorna a classe do objeto DF.1
  length(DF.1)   # retorna o "tamanho" do objeto DF.1
  str(DF.1)      # retorna a estrutura do objeto DF.1
  


# 2.4 Listas ----
#   tipo especial de vetor que aceita elementos de classes diferentes.

#  coleçlão ordenada de objetos
#  Os objetos não necessitam ser do mesmo tipo, ou tamanho  

# 2.4.1 Exemplo 12 ----  
# Criando um objeto denomimado L1 da classe Lista a partir dos objetos já 
#   existentes height, sex e age, race, v1, v2, v3, M1 e DF 
  
  L1 <- list(height, sex, age, race, v1, v2, v3, M1, DF)

  L1 # exibindo em tela o objeto DF.1
  
  class(L1)    # retorna a classe do objeto L1
  length(L1)   # retorna o "tamanho" do objeto L1
  str(L1)      # retorna a estrutura do objeto L1
  

# ______________________________________________________________________________
# 3 - Diretórios de trabalho ----
  
# O `R` sempre trabalha em algum diretório  
  
# Em geral usa-se os diretórios para:  
#   Buscar arquivos para carregar/importar;
#   Salvar arquivos;
#     scripts/códigos, figuras, arquivos de dados, etc
  
# Como default o R possui como diretório a pasta de “documentos do usuário”.
  
 
# Retornando o diretorio de trabalho corrente
  getwd()  
  
# definindo/alterando diretorio de trabalho
# EXEMPLO: 
  setwd("D:/AULA")
  
  
# OBSERVAÇÕES
  
#   Windows utiliza a barra invertida \ para definir endereços ou caminhos 
#     no computador, enquanto o R utiliza a barra normal /.  
  
#   A barra invertida  \  é um caractere reservado no R e não pode ser 
#     utilizado isoladamente 
  
#   Se for o caso, pode-se utilizar dupla barra invertida \\ para definir 
#     o caminho do diretório
  
  
# 3.1 Interagindo com Sistema Operacional ----
  
#   interagir com os arquivos do computador, seja criando novas pastas, 
#     descompactando e compactando arquivos, listando e removendo arquivos 
#     do disco rígido do computador ou qualquer outro tipo de operação.
  
# listando Arquivos e Pastas em um diretório
  list.files("E:/DIRETORIO/") 
  
# listando diretórios
  list.dirs()
  list.dirs("E:/DIRETORIO/")
  
# Salvando um arquivo extensao .csv em um diretório
  write.csv2(age,
             file = "D:/DIRETOARIO/age.csv")

  list.files("D:/DIRETORIO/")  
  
# exluindo/removendo/apagando um arquivo extensao em um diretório  
  file.remove("D:/DIRETOARIO/age.csv")
  list.files("D:/DIRETORIO/")

    
# ______________________________________________________________________________ 
# 4. ENTRADA DE DADOS: Importando conjunto de dados ---- 
  
#   QUAIS conjuntdos de DADOS estão sendo importados/carregados?

    
# IMPORTANTE:
  
# Antes da adoção de quaisquer procedimentos de leitura, carregamento ou 
#   importação de um conjunto de dados recomenda-se, fortemente, estar atento à: 
  
#   PROCEDÊNCIA do conjunto de dados;
#     - dados primários, secundários?
#     - fonte do dado, qual pesquisa?
  
#   ESTRUTURA do dataset utilizado;
#     - formato (extensão);
#     - documentação (notas técnicas);
#     - dicionário de variáveis;

# Essa atenção auxilia na escolha do pacote e função, e na definição de 
#   procedimentos de importação adequados.
  
  
# CONSIDERAÇÕES

# Há diversas formas de armazenamento de dados e em diferentes formatos de
#   arquivos.

# O enfoque aqui será dado, especialmente, em funções para importação de dados 
#   associados a pacotes da família tidyverse.

# ==============================================================================

# Aula 2
# ______________________________________________________________________________

# Abordagem da Aula ----

#  -> Diretorios de trabalho
#  -> principios básicos
#  -> fluxos de trabalho
#  -> importacao de dados

#  ____________________________________________________________________________
# | Referência                                                                 |
# | WICKHAN, H., ÇETINKAYA-RUNDEL, M. GROLEMUND, G. R for Data Science: Import,|
# |   Tidy, Transform and Model Data. 2nd ed. O'Reilly Media. 2023.            |
# |                                                                            |
# | Disponível em: https://r4ds.hadley.nz/                                     |
# | License: CC BY-NC-ND 3.0                                                   |
# |____________________________________________________________________________|

# ______________________________________________________________________________

# |> Diretórios de trabalho ----

# O `R` sempre trabalha em algum diretório  

# Em geral usa-se os diretórios para:  
#   Buscar arquivos para carregar/importar;
#   Salvar arquivos;
#     scripts/códigos, figuras, arquivos de dados, etc

# Como "default" o R possui como diretório a pasta de “documentos do usuário”.

# Retornando o diretorio de trabalho corrente
  getwd()  

# definindo/alterando diretorio de trabalho
# EXEMPLO: 
  setwd("D:/AULA")

#  __________________________________________________________________________
# | OBSERVAÇÕES                                                              |
# |                                                                          |
# |  Windows utiliza a barra invertida \ para definir endereços ou caminhos  |
# |    no computador, enquanto o R utiliza a barra normal /.                 |
# |                                                                          |
# |  A barra invertida  \  é um caractere reservado no R e não pode ser      |
# |    utilizado isoladamente                                                |
# |                                                                          |
# |  Se for o caso, pode-se utilizar dupla barra invertida \\ para definir   |
# |    o caminho do diretório                                                |
# |__________________________________________________________________________|

# Interagindo com Sistema Operacional

#   interagir com os arquivos do computador, seja criando novas pastas, 
#     descompactando e compactando arquivos, listando e removendo arquivos 
#     do disco rígido do computador ou qualquer outro tipo de operação.

# listando Arquivos e Pastas em um diretório
  list.files("E:/DIRETORIO/") 

# listando diretórios
  list.dirs()
  list.dirs("E:/DIRETORIO/")

# Salvando um arquivo extensao .csv em um diretório
  write.csv2(age,
             file = "D:/DIRETOARIO/age.csv")

  list.files("D:/DIRETORIO/")  

# exluindo/removendo/apagando um arquivo extensao em um diretório   
  file.remove("D:/DIRETOARIO/age.csv")
  list.files("D:/DIRETORIO/")

# ______________________________________________________________________________ 
# |> Principios Básicos ----
 
# Cálculos matemáticos básicos: 
  
  1 / 200 * 30
  (59 + 73 + 2) / 3
  sin(pi / 2)

# Armazenando resultados em um objeto por meio do Operador de Atribuição "<-" 
  
  x <- 3 * 4
  y <- (3 + 4) * 5
  
# combinar vários elementos em um vetor com c():
  
# Cria um vetor de números primos
  primos <- c(2, 3, 5, 7, 11, 13)

    
# Aritmética básica em vetores é aplicada a cada elemento do vetor:
     
  primos * 2 # multiplica primos por 2
  primos - 1 # subtrai uma unidade
  
#  __________________________________________________________________________
# | Aspas "" e parênteses () no R:                                           |
# |                                                                          |  
# |  As aspas "" e parênteses () devem sempre vir em pares.                  |
# |  é possível se cometer um erro e acabar com aspas não fechadas.          |
# |  Se isso acontecer, o console do R mostrará o caractere de continuação   |
# |  “+”.                                                                    |
# |                                                                          |  
# |  O + indica que o R está esperando mais alguma entrada (input); ele acha | 
# |  que você ainda não terminou de digitar. Normalmente, isso significa que |
# |  você esqueceu de adicionar um " ou um )                                 |
# |__________________________________________________________________________|
  

# ______________________________________________________________________________ 
# |> Estilo de código ----

#   Usar um estilo de escrita consistente torna mais fácil para outras pessoas
#   (incluindo você no futuro!) ler o seu trabalho. 
  
# SUGESTÕES DE ORGANIZAÇÃO: PRIMEIRAS IDEIAS  

# NOMES:
#   nomes de objetos e variáveis (aqueles criados por <- e aqueles criados  
#   por mutate())devem usar apenas letras minúsculas, números e _. Use _ para  
#   separar palavras dentro de um nome.
  
#   Se você tem um monte de nomes para coisas que estão relacionadas entre si, 
#   faça o possível para ser consistente.
  
#   Em geral se você tem um monte de variáveis que são uma variação de um tema 
#   específico, é melhor dar a elas um prefixo comum em vez de um sufixo comum,
#   porque o recurso de autocompletar funciona melhor no início de uma variável.
  

# ESPAÇOS
#   Use espaços em ambos os lados dos operadores matemáticos, exceto ^ 
#   (operadores: +, -, ==, <, …), e em torno do operador de atribuição (<-).
  
# Tente escrever assim:
  z <- (a + b)^2 / d
  
# Evite escrever assim:
  z<-( a + b ) ^ 2/d
  
#   Não coloque espaços dentro ou fora de parênteses para chamadas de funções 
#   normais. Sempre coloque um espaço depois de uma vírgula, assim como 
#   escrevemos em português.
  
# Tente escrever assim:
  mean(x, na.rm = TRUE)
  
# Evite escrever assim:
  mean (x ,na.rm=TRUE)

# ______________________________________________________________________________ 
# |> Pacotes / packages / libraries no R ----
  
#   Representam um conjunto de procedimentos agrupados em uma coleção de funções
#   e voltados para a resolução de um problema qualquer.

# INSTALANDO PACOTES  
# Principais fontes:
#   -> CRAN (The Comprehensive R Archive Network)
#         Repositório oficial do R www://cran.r-project.org  
#   -> Github
  
# Instalando Pacotes via CRAN
  install.packages('tidyverse') # instalando pacote 'tidyverse'
  install.packages('readr')     # instalando pacote 'readr'
  
# Instalando Pacotes via Github
  install.packages('devtools')  # instalando pacote 'devtools'  
  devtools::install_github("hadley/ggplot2") # instalando pacote 'ggplot2'
  
#   Os pacotes do github não são moderados. 
#   Qualquer pessoa pode enviar código para lá e o conteúdo não é checado de 
#   forma independente. 
  
#   Evite instalar pacotes do github sem conhecer os autores. 
#   Apesar de improvável, é possível que esses possuam código malicioso.
  

# CARREGANDO PACOTES  
#  __________________________________________________________________________ 
# |IMPORTANTE                                                                |
# |                                                                          |  
# |  Dentro de uma rotina de pesquisa, utilizamos a função library para      | 
# |  carregar um pacote. Cada pacote deve ser carregado a cada sessão.       |
# |  Alguns pacotes, tal como o base com os comandos básicos do R, são       |
# |  inicializados automaticamente. A grande maioria, porém, deve ser        |
# |  carregada no início dos scripts.                                        |
# |__________________________________________________________________________|  
  
# Carregando pacote 'dplyr'
  library(dplyr) 
  
  
# ______________________________________________________________________________ 
# |> Entrada de Dados: Importando conjunto de dados ---- 
  
#   QUAIS conjuntos de DADOS estão sendo importados/carregados?

#  __________________________________________________________________________
# | IMPORTANTE:                                                              |
# |                                                                          |  
# | Antes da adoção de quaisquer procedimentos de leitura, carregamento ou   | 
# | importação de um conjunto de dados recomenda-se, fortemente, estar atento|
# | à:                                                                       |
# |                                                                          |
# |  PROCEDÊNCIA do conjunto de dados;                                       |
# |    -> dados primários, secundários?                                      |
# |    -> fonte do dado, qual pesquisa?                                      |
# |                                                                          |
# |  ESTRUTURA do dataset utilizado;                                         |
# |    -> formato (extensão);                                                |
# |    -> documentação (notas técnicas);                                     |
# |    -> dicionário de variáveis;                                           |
# |                                                                          |  
# | Há diversas formas de armazenamento de dados e em diferentes formatos de |
# | arquivos.                                                                |
# |__________________________________________________________________________|

  
# CONSIDERAÇÕES  
#   1. Essa atenção auxilia na escolha do pacote e função, e na definição de 
#      procedimentos de importação adequados.
  
#   2. O enfoque aqui será dado, especialmente, em funções para importação de  
#      dados associados a pacotes da família tidyverse.

#   3. Enfoque: Conjunto de dados (ou Datasets) retangulares    

  
#  __________________________________________________________________________
# | Dados retangulares:                                                      |                      |  
# |  "Conjunto de valores associadas com uma variável e uma observação"      |
# |__________________________________________________________________________|
  

# Alguns formatos de arquivos (extensões) de dados (datasets retangulares) 
# comumente utilizados e/ou encontrados 
#   -> Texto não estruturado (txt);
#   -> Dados delimitados em texto (csv);
#   -> Microsoft Excel (xls, xlsx)
#   -> Arquivos nativos do R (RData e rds);
#   -> Arquivos de dados de outros softwares estatístico-computacionais.
#   -> Dentre outros...

# Cheatsheet data-import    
# https://rawgit.com/rstudio/cheatsheets/master/data-import.pdf
# https://rstudio.github.io/cheatsheets/translations/portuguese/data-import_pt_br.pdf   

# Pacotes (packages) comumente utilizados:
  
#  -> readr: Read Rectangular Text Data
#     em geral, para importar arquivos de textos contendo conjunto de dados 
#     separados por algum ‘delimitador’ ou por ‘posição fixa’  
  
#  -> readxl: Read Excel Files
#     para importar arquivos Excel (.xls, .xlsx)
  
#  -> haven: Import and Export ‘SPSS’, ‘Stata’ and ‘SAS’ Files
#     para importa arquivos nativos dos ambientes ‘SPSS’ (.sav, .zsav, .por), 
#    ‘Stata’ (.dta) e ‘SAS’ (.sas7bdat ).
  
#  -> googlesheets4
#     fornece uma interface R para o Google Sheets via the Sheets API v4.
#     importe planilhas de uma URL, um ID de planilha ou mesmo um drible 
#     do googledrive.
  
#  -> PNADcIBGE
#     baixa, carrega e analisa microdados da PNADC   
  
#  -> dentre outros.
 
  
#  __________________________________________________________________________  
# | The readxl library: Import functions                                     |
# |                                                                          |  
# |  Funções para ler/importar arquivos extensão xls e xlsx (Microsoft       |
# |  Excel):                                                                 |
# |                                                                          |  
# |  -> read_excel(): formato auto-detectado (xls, xlsx);                    |
# |  -> read_xls()  : formato xls;                                           |
# |  -> read_xlsx() : formato xlsx.                                          |
# |__________________________________________________________________________|
  
# Instalando pacote 'readxl'                                
  install.packages("readxl")
  
# Carregando pacote
  library(readxl)
  
# Funcao e argumentos para leitura de dados  
#  read_*(path,
#         sheet = NULL,
#         range = NULL,
#         col_names = TRUE,
#         col_types = NULL,
#         ...)

# Exemplo: 
# Leitura do Arquivo ‘Fazendas.xlsx’  
  fazendas <- readxl::read_xlsx(path = "c:/DIRETORIO/Fazendas.xlsx",
                                sheet = "Fazendas")
  
  names(fazendas) # print dos nomes das variaveis no objeto fazendas
  
  str(fazendas) # print estrutura do objeto fazendas
  
# Tabela 1286: População e Distribuição da população pelas Grandes Regiões e
#              Unidades da Federação nos Censos Demográficos - 1872 a 2010  
  tab.1286 <- readxl::read_xlsx(path = "c:/DIRETORIO/Tabela1286_Sidra-IBGE.xlsx",
                                sheet = "Tabela",
                                range = "A5:O37",
                                col_names = c("Nível",
                                              "COD",
                                              "UNIDADE",
                                              "A1872",
                                              "A1890",
                                              "A1900",
                                              "A1920",
                                              "A1940",
                                              "A1950",
                                              "A1960",
                                              "A1970",
                                              "A1980",
                                              "A1991",
                                              "A2000",
                                              "A2010"),
                                col_types = NULL,
                                na = "") 



# ===============================================================================
# Aula 3
# ______________________________________________________________________________

# Abordagem da Aula ----

#  -> importacao de dados
#  -> Tratamento de dados: Manuseio de base de dados

#  ____________________________________________________________________________
# | Referência                                                                 |
# | WICKHAN, H., ÇETINKAYA-RUNDEL, M. GROLEMUND, G. R for Data Science: Import,|
# |   Tidy, Transform and Model Data. 2nd ed. O'Reilly Media. 2023.            |
# |                                                                            |
# | Disponível em: https://r4ds.hadley.nz/                                     |
# | License: CC BY-NC-ND 3.0                                                   |
# |____________________________________________________________________________|

# ______________________________________________________________________________
# Identificando o diretorio de trabalho corrente
  getwd()  

# definindo/alterando diretorio de trabalho
# EXEMPLO: 
  setwd("D:/AULA")

# ______________________________________________________________________________ 
# |> ENTRADA DE DADOS: Importando conjunto de dados ---- 
  
#   QUAIS conjuntos de DADOS estão sendo importados/carregados?

#  __________________________________________________________________________
# | IMPORTANTE:                                                              |
# |                                                                          |  
# | Antes da adoção de quaisquer procedimentos de leitura, carregamento ou   | 
# | importação de um conjunto de dados recomenda-se, fortemente, estar atento|
# | à:                                                                       |
# |                                                                          |
# |  PROCEDÊNCIA do conjunto de dados;                                       |
# |    -> dados primários, secundários?                                      |
# |    -> fonte do dado, qual pesquisa?                                      |
# |                                                                          |
# |  ESTRUTURA do dataset utilizado;                                         |
# |    -> formato (extensão);                                                |
# |    -> documentação (notas técnicas);                                     |
# |    -> dicionário de variáveis;                                           |
# |                                                                          |  
# | Há diversas formas de armazenamento de dados e em diferentes formatos de |
# | arquivos.                                                                |
# |__________________________________________________________________________|

  
# CONSIDERAÇÕES  
#   1. Essa atenção auxilia na escolha do pacote e função, e na definição de 
#      procedimentos de importação adequados.
  
#   2. O enfoque aqui será dado, especialmente, em funções para importação de  
#      dados associados a pacotes da família tidyverse.

#   3. Enfoque: Conjunto de dados (ou Datasets) retangulares    

#  __________________________________________________________________________
# | Dados retangulares:                                                      |                      |  
# |  "Conjunto de valores associadas com uma variável e uma observação"      |
# |__________________________________________________________________________|

# Alguns formatos de arquivos (extensões) de dados (datasets retangulares) 
# comumente utilizados e/ou encontrados 
#   -> Texto não estruturado (txt);
#   -> Dados delimitados em texto (csv);
#   -> Microsoft Excel (xls, xlsx)
#   -> Arquivos nativos do R (RData e rds);
#   -> Arquivos de dados de outros softwares estatístico-computacionais.
#   -> Dentre outros...

# Cheatsheet data-import    
# https://rawgit.com/rstudio/cheatsheets/master/data-import.pdf
# https://rstudio.github.io/cheatsheets/translations/portuguese/data-import_pt_br.pdf   

# Pacotes (packages) comumente utilizados:
  
#  -> readr: Read Rectangular Text Data
#     em geral, para importar arquivos de textos contendo conjunto de dados 
#     separados por algum ‘delimitador’ ou por ‘posição fixa’  
  
#  -> readxl: Read Excel Files
#     para importar arquivos Excel (.xls, .xlsx)
  
#  -> haven: Import and Export ‘SPSS’, ‘Stata’ and ‘SAS’ Files
#     para importa arquivos nativos dos ambientes ‘SPSS’ (.sav, .zsav, .por), 
#    ‘Stata’ (.dta) e ‘SAS’ (.sas7bdat ).
  
#  -> googlesheets4
#     fornece uma interface R para o Google Sheets via the Sheets API v4.
#     importe planilhas de uma URL, um ID de planilha ou mesmo um drible 
#     do googledrive.
  
#  -> PNADcIBGE
#     baixa, carrega e analisa microdados da PNADC   
  
#  -> dentre outros.


# ______________________________________________________________________________
# >> readxl package ----  

#  __________________________________________________________________________  
# | The readxl library: Import functions                                     |
# |                                                                          |  
# |  Funções para ler/importar arquivos extensão xls e xlsx (Microsoft       |
# |  Excel):                                                                 |
# |                                                                          |  
# |  -> read_excel(): formato auto-detectado (xls, xlsx);                    |
# |  -> read_xls()  : formato xls;                                           |
# |  -> read_xlsx() : formato xlsx.                                          |
# |__________________________________________________________________________|
  
# Instalando pacote 'readxl'                                
  install.packages("readxl")
  
# Carregando pacote
  library(readxl)
  
# Funcao e argumentos para leitura de dados  
#  read_*(path,
#         sheet = NULL,
#         range = NULL,
#         col_names = TRUE,
#         col_types = NULL,
#         ...)

# Exemplo: 
# Leitura do Arquivo ‘Fazendas.xlsx’  
  fazendas <- readxl::read_xlsx(path = "c:/DIRETORIO/Fazendas.xlsx",
                                sheet = "Fazendas")
  
  names(fazendas) # print dos nomes das variaveis no objeto fazendas
  
  str(fazendas) # print estrutura do objeto fazendas
  
# Tabela 1286: População e Distribuição da população pelas Grandes Regiões e
#              Unidades da Federação nos Censos Demográficos - 1872 a 2010  
  tab.1286 <- readxl::read_xlsx(path = "c:/DIRETORIO/Tabela1286_Sidra-IBGE.xlsx",
                                sheet = "Tabela",
                                range = "A5:O37",
                                col_names = c("Nível",
                                              "COD",
                                              "UNIDADE",
                                              "A1872",
                                              "A1890",
                                              "A1900",
                                              "A1920",
                                              "A1940",
                                              "A1950",
                                              "A1960",
                                              "A1970",
                                              "A1980",
                                              "A1991",
                                              "A2000",
                                              "A2010"),
                                col_types = NULL,
                                na = "") 

# ______________________________________________________________________________
# >> haven package ----  

#  __________________________________________________________________________
# | The haven library: Import functions                                      |
# |                                                                          |  
# |  A biblioteca Haven permite leitura de formatos de dados nativos dos     | 
# |  ambientes estatístico-computacionais: SAS, SPSS e Stata                 |
# |                                                                          |  
# |  Ambiente SAS:                                                           |
# |  -> read_sas(): lê arquivos .sas7bdat e .sas7bcat;                       |
# |  -> read_xpt(): lê arquivos SAS (versão 5 e versão 8);                   |
# |                                                                          |
# |  Ambiente SPSS:                                                          |
# |  -> read_sav(): lê arquivos .sav e .zsav;                                |
# |  -> read_por(): lê arquivos .por;                                        |
# |                                                                          |  
# |  Ambiente SAS:                                                           |
# |  -> read_dta(): lê arquivos .dta.                                        |
# |__________________________________________________________________________|
  
# Instalando pacote 'haven'
  install.packages("haven")
  
# Carregando libraries  
  library(haven)
  
# Funcao e argumentos para leitura de dados  
# read_*(file, ...) # vide help
  
# Exemplo 
# Usando conjunto de dados iris no diretorio examples do pacote haven

# definindo caminho do diretório 'examples' do pacote 'haven'
  dir.examples <- system.file("examples", package = 'haven')
  
# verificando arquivos do diretório 'examples'
  list.files(dir.examples)
  
# Importando conjunto de dados (SAS) do arquivo iris.sas7bdat
  dados.iris.sas <- haven::read_sas(paste0(dir.examples,"/iris.sas7bdat"))

# print dos dados (head) do objeto dados.iris.sas
  head(dados.iris.sas)
  
# Importando conjunto de dados (SPSS) do arquivo iris.sav
  dados.iris.spss <- haven::read_sav(paste0(dir.examples,"/iris.sav"))
  
# print dos dados (head) do objeto dados.iris.spss
  head(dados.iris.spss)
  
# Importando conjunto de dados (Stata) do arquivo iris.dta
  dados.iris.stata <- haven::read_dta(paste0(dir.examples,"/iris.dta"))
  
# print dos dados (head) do objeto dados.iris.stata
  head(dados.iris.stata)

    
# ______________________________________________________________________________
# >> googlesheets4 package ----  
#    importando planilhas do googledrive formato googlesheet  
  
# Instalando pacote googlesheets4 
  install.packages("googlesheets4")
  
# Carregando pacote googlesheets4
  library(googlesheets4)
  
# Carregando arquivo Fazendas do google drive 
  fazendas2 <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1FKybbSiDveaJL-RlTl8hxbiNddfOzHCZVm3FZjH6yeo/edit?gid=2079528163#gid=2079528163",
                                         sheet = "Fazendas")
  
  names(fazendas) # print dos nomes das variaveis no objeto fazendas
  
  str(fazendas) # print estrutura do objeto fazendas

  
    
# Tabela 1286: População e Distribuição da população pelas Grandes Regiões e 
#              Unidades da Federação nos Censos Demográficos - 1872 a 2010  
# arquivo do googlesheet  
  
  tab.1286 <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1AarZwzqCRIWTdSF9NTr9UESq-KrwqHItgi1Hrz7Whi8/edit?gid=42470094#gid=42470094",
                                        sheet = "Tabela",
                                        range = "A5:O37",
                                        col_names = c("Nível",
                                                      "COD",
                                                      "UNIDADE",
                                                      "A1872",
                                                      "A1890",
                                                      "A1900",
                                                      "A1920",
                                                      "A1940",
                                                      "A1950",
                                                      "A1960",
                                                      "A1970",
                                                      "A1980",
                                                      "A1991",
                                                      "A2000",
                                                      "A2010"),
                                        col_types = NULL,
                                        na = "")  
  
# ______________________________________________________________________________
# >> readr package ----  
  
#  __________________________________________________________________________  
# | The readr library: Import functions                                      |
# |   Read a delimited file into a tibble:                                   |
# |                                                                          |  
# |     Arquivos com delimitadores (delimited file): Arquivo em que as       |
# |     informações (variáveis) são ‘separadas’ por algum caractere          |
# |     delimitador tais como vírgula, ponto-e-vírgula (semi-vírgula),       |
# |     espaço, dentre outros.                                               |  
# |                                                                          |
# |  -> read_delim(): arquivos delimitados por caractere específico;         |
# |  -> read_csv()  : arquivos delimitados por vígulas;                      |
# |  -> read_csv2() : arquivos delimitados por ponto-e-vírgulas              |
# |                   (semi-vírgulas);                                       |
# |  -> read_tsv()  : arquivos separados por ‘tabulação’;                    |
# |  -> read_table(): arquivos separados por ‘espaço em branco’.             |
# |                                                                          |  
# |                                                                          |
# |  Read a fixed width file into a tibble:                                  |
# |                                                                          |  
# |    Arquivos posição fixa (fixed width file): Arquivos em que as          |
# |    informações (variáveis) são definidas pela posição dos caracteres,    |
# |    ou comprimento de um conjunto de caracteres, nos arquivos.            |
# |                                                                          |
# |  -> read_fwf()  :   arquivos definidos por posição fixa.                 |
# |__________________________________________________________________________|  
  
# Instalando pacote "readr"  
  install.packages("readr")
  
# Carregando libraries ou packages
  library(readr)
  
# Carregando base de dados DM_CURSO_2015.csv
  DM_CURSO_2015 <- readr::read_delim("c:/DIRETORIO/DM_CURSO_2015.csv",
                                     delim = "|",
                                     col_names = TRUE)
  
  names(DM_CURSO_2015) # print dos nomes das variaveis no objeto DM_CURSO_2015
  
  str(DM_CURSO_2015) # print estrutura do objeto DM_CURSO_2015  
  
  
# Carregando base de dados PNAD 2015 - DOMICILIOS: "DOM.txt"
# arquivo do tipo "posicao fixa"
# pacote: 'readr'
# função: 'read_fwf'
  
# DEFININDO VETOR COM TAMANHO DOS CAMPOS DAS VARIAVEIS
# (EXCETO VARIAVEL UF)
  
  tamanho.campos.2015 <- c(4, 8, 3, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1,
                           12, 12, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 2, 2, 4, 2, 12, 3, 12,
                           6, 9, 3, 5, 12, 4, 7, 7, 2, 12, 2, 1, 1,
                           7, 5, 8)   
  
# DEFININDO VETOR COM O NOME DAS VARIAVEIS (EXCETO VARIAVEL UF)
# nome.variaveis.2015
  
  nome.variaveis.2015 <- c('V0101', 'V0102', 'V0103', 'V0104', 'V0105',
                           'V0106', 'V0201', 'V0202', 'V0203', 'V0204',
                           'V0205', 'V0206', 'V0207', 'V0208', 'V0209',
                           'V0210', 'V0211', 'V0212', 'V0213', 'V0214',
                           'V0215', 'V0216', 'V2016', 'V0217', 'V0218',
                           'V0219', 'V0220', 'V2020', 'V0221', 'V0222',
                           'V0223', 'V0224', 'V0225', 'V0226', 'V0227',
                           'V02270', 'V02271', 'V02272', 'V02273',
                           'V02274', 'V2027', 'V0228', 'V0229', 'V0230',
                           'V0231', 'V0232', 'V02321', 'V02322',
                           'V02323', 'V02324', 'V02325', 'V02326',
                           'V02327', 'V02424', 'V02425', 'V02426',
                           'V2032', 'V4105', 'V4107', 'V4600',
                           'V4601', 'V4602', 'V4604', 'V4605', 'V4606',
                           'V4607', 'V4608', 'V4609', 'V4610', 'V4611',
                           'V4614', 'UPA', 'V4617', 'V4618', 'V4620',
                           'V4621', 'V4622', 'V4624', 'V4628', 'V4632',
                           'V4633', 'V9992')  
  
# DEFININDO O TIPO DAS VARIAVEIS (EXCETO VARIAVEL UF)
# [c = character; n=number], tipo.variavel.2015
  
  tipo.variaveis.2015 <- paste0("ccccccccccnncnncccccccncccccccccc",
                                "ccccccccccccccccccccccccccccccncn",
                                "ccnnncnncncccncc")
  
  str(tipo.variaveis.2015) # print estrutura objeto nome.variaveis.2015
  
# Obtendo objeto denominado DOM_2015 pela aplicacao da função 'read_fwf’
  
  DOM_2015 <- read_fwf("e:/DIRETORIO/DOM2015.txt",
                       fwf_widths((tamanho.campos.2015),
                                  col_names = nome.variaveis.2015),
                       col_types = tipo.variaveis.2015)
  
  names(DOM_2015) # print dos nomes das variaveis no objeto DOM_2015
  
  str(DOM_2015) # print estrutura do objeto DOM_2015


  

  
